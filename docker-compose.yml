services:
  api-1:
    container_name: "${APP_NAME}-api-1"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "botinow-backend-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    ports:
      - "${API_PORT_1}:8000"
    env_file:
      - .env
    depends_on:
      - db
    restart: unless-stopped
  api-2:
    container_name: "${APP_NAME}-api-2"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "botinow-backend-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    ports:
      - "${API_PORT_2}:8000"
    env_file:
      - .env
    depends_on:
      - db
    restart: unless-stopped

  # api-3:
  #   container_name: "${APP_NAME}-api-3"
  #   build:
  #     context: .
  #     args:
  #       - ENVIRONMENT=${ENVIRONMENT}
  #   image: "botinow-backend-app"
  #   volumes:
  #     - .:/app
  #   command: /app/startup.sh
  #   ports:
  #     - "${API_PORT_3}:8000"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - db
  #   restart: unless-stopped

  db:
    container_name: "${APP_NAME}-database"
    image: postgres:14
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # pgbouncer:
  #   image: edoburu/pgbouncer
  #   environment:
  #     - DB_USER="${POSTGRES_USER}"
  #     - DB_PASSWORD="${POSTGRES_PASSWORD}"
  #     - DB_HOST="${DB_HOST}"
  #     - DB_NAME:${DB_NAME}
  #     - POOL_MODE=transaction
  #     - ADMIN_USERS="${POSTGRES_USER}"
  #   ports:
  #     - "6432:6432"
  #   depends_on:
  #     - db

  redis:
    container_name: "${APP_NAME}-redis"
    restart: unless-stopped
    image: redis:6.2.7
    command: "redis-server /usr/local/etc/redis/redis.conf"
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

  minio:
    image: bitnami/minio:2022.8.26
    ports:
      - '${S3_PORT}:9000'
      - '${MINIO_ADMIN_PANEL_PORT}:9001'
    volumes:
      - minio-data:/data

    environment:
      MINIO_ROOT_USER: "${S3_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${S3_ROOT_PASSWORD}"

  celery-worker-1:
    image: "botinow-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-worker-1"
    command: celery -A app.core.celery.celery worker --loglevel=info -n w1
    volumes:
      - .:/app
    depends_on:
      - db
      - api-1
      #      - api-2
      #      - api-3
      - redis

  #  celery-worker-2:
  #    image: "botinow-backend-app"
  #    build: .
  #    container_name: "${APP_NAME}-celery-worker-2"
  #    command: celery -A app.core.celery.celery worker --loglevel=info -n w2
  #    volumes:
  #      - .:/app
  #    depends_on:
  #      - db
  #      - api-1
  #      - api-2
  #      - api-3
  #      - redis

  #  celery-worker-3:
  #    image: "botinow-backend-app"
  #    build: .
  #    container_name: "${APP_NAME}-celery-worker-3"
  #    command: celery -A app.core.celery.celery worker --loglevel=info -n w3
  #    volumes:
  #      - .:/app
  #    depends_on:
  #      - db
  #      - api-1
  #      - api-2
  #      - api-3
  #      - redis

  celery-flower:
    image: "botinow-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-flower"
    command: celery -A app.core.celery.celery flower --port=5555
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    depends_on:
      - db
      - api-1
      #      - api-2
      #      - api-3
      - redis

volumes:
  postgres-data:
  redis-data:
  minio-data:
