services:
  api-1:
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "botinow-user-management-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    container_name: "${APP_NAME}-api-1"
    ports:
      - "${API_PORT_1}:8000"
    env_file:
      - .env
    networks:
      - api-1-db-network
      - global-api-network
    depends_on:
      - db
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api-2:
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "botinow-user-management-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    container_name: "${APP_NAME}-api-2"
    ports:
      - "${API_PORT_2}:8000"
    env_file:
      - .env
    networks:
      - api-2-db-network
      - global-api-network
    depends_on:
      - db
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    container_name: "${APP_NAME}-database"
    image: postgres:14
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - api-1-db-network
      - api-2-db-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "--username", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:


networks:
  api-1-db-network:
  api-2-db-network:
  global-api-network:
    external: true
