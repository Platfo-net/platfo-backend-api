services:
  api:
    container_name: "${APP_NAME}-api"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "platfo-backend-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    ports:
      - "8000:8000"
    depends_on:
      - db
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}

  db:
    container_name: "${APP_NAME}-database"
    image: postgres:14
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    container_name: "${APP_NAME}-redis"
    restart: unless-stopped
    image: bitnami/redis:6.2.12
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    env_file:
      - .env

  minio:
    image: minio/minio:RELEASE.2023-03-13T19-46-17Z.fips
    ports:
      - '${S3_PORT}:9000'
      - '${MINIO_ADMIN_PANEL_PORT}:9001'
    volumes:
      - minio-data:/data

    environment:
      MINIO_ROOT_USER: "${S3_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${S3_ROOT_PASSWORD}"

  celery-worker:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-worker-1"
    command: celery -A app.core.celery.celery worker --loglevel=info -n w1
    volumes:
      - .:/app
    depends_on:
      - db
      - api
      - redis

  # celery-beat:
  #   image: "platfo-backend-app"
  #   build: .
  #   container_name: "${APP_NAME}-celery-beat"
  #   command: celery -A app.core.celery.celery beat
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - db
  #     - api
  #     - redis

  celery-flower:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-flower"
    command: celery -A app.core.celery.celery flower --port=5566
    volumes:
      - .:/app
    ports:
      - "5566:5566"
    depends_on:
      - db
      - api
      - redis

  loki:
    image: grafana/loki:2.8.0
    container_name: "${APP_NAME}-loki"
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-logs:/loki

  grafana:
    image: grafana/grafana:8.3.3
    container_name: "${APP_NAME}-grafana"
    ports:
      - 3000:3000
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ORG_ROLE=Editor
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_USERS_DEFAULT_THEME=light

volumes:
  postgres-data:
  redis-data:
  minio-data:
  loki-logs:


