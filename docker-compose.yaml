services:
  admin:
    build: ./admin-panel
    image: platfo-admin
    container_name: platfo-admin 
    command: sh -c "python manage.py wait_for_db &&
                    python manage.py migrate && 
                    python manage.py firstuser && 
                    python manage.py runserver 0.0.0.0:8002"
    ports:
      - 8002:8002
    restart: unless-stopped
    volumes:
      - ./admin-panel:/app
    env_file:
      - .env
  api:
    container_name: "${APP_NAME}-api"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "platfo-backend-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    ports:
      - "8000:8000"
    depends_on:
      - db
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}

  db:
    container_name: "${APP_NAME}-database"
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s

  redis:
    container_name: "${APP_NAME}-redis"
    restart: unless-stopped
    image: bitnami/redis:6.2.12
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    env_file:
      - .env

  # minio:
  #   image: minio/minio:RELEASE.2023-03-13T19-46-17Z.fips
  #   ports:
  #     - '${S3_PORT}:9000'
  #     - '${MINIO_ADMIN_PANEL_PORT}:9001'
  #   volumes:
  #     - minio-data:/data

  #   environment:
  #     MINIO_ROOT_USER: "${S3_ROOT_USER}"
  #     MINIO_ROOT_PASSWORD: "${S3_ROOT_PASSWORD}"

  celery-worker:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-worker-1"
    command: celery -A app.core.celery.celery worker --loglevel=info -n w1
    volumes:
      - .:/app
    depends_on:
      - db
      - api
      - redis

  # celery-beat:
  #   image: "platfo-backend-app"
  #   build: .
  #   container_name: "${APP_NAME}-celery-beat"
  #   command: celery -A app.core.celery.celery beat
  #   volumes:
  #     - .:/app
  #   depends_on:
  #     - db
  #     - api
  #     - redis

  celery-flower:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-flower"
    command: celery -A app.core.celery.celery flower --port=5566
    volumes:
      - .:/app
    ports:
      - "5566:5566"
    depends_on:
      - db
      - api
      - redis

volumes:
  postgres-data:
  redis-data:
  minio-data:
