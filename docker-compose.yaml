services:
  # admin:
  #   build: ./admin-panel
  #   image: platfo-admin
  #   container_name: platfo-admin 
  #   command: sh -c "python manage.py wait_for_db &&
  #                   python manage.py migrate && 
  #                   python manage.py firstuser && 
  #                   python manage.py runserver 0.0.0.0:8002"
  #   ports:
  #     - 8002:8002
  #   restart: unless-stopped
  #   volumes:
  #     - ./admin-panel:/app
  #   env_file:
  #     - .env
  api:
    container_name: "${APP_NAME}-api"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "platfo-backend-app"
    volumes:
      - .:/app
    command: /app/startup.sh
    ports:
      - "8000:8000"
    depends_on:
      - db
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}

  db:
    container_name: "${APP_NAME}-database"
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    ports:
    - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s

  redis:
    container_name: "${APP_NAME}-redis"
    restart: unless-stopped
    image: bitnami/redis:6.2.12
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    env_file:
      - .env

  celery-worker:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-worker-1"
    command: celery -A app.core.celery.celery worker --loglevel=info -n w1
    volumes:
      - .:/app
    depends_on:
      - db
      - api
      - redis

  celery-beat:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-beat"
    command: celery -A app.core.celery.celery beat
    volumes:
      - .:/app
    depends_on:
      - db
      - api
      - redis

  celery-flower:
    image: "platfo-backend-app"
    build: .
    container_name: "${APP_NAME}-celery-flower"
    command: celery -A app.core.celery.celery flower --port=5566
    volumes:
      - .:/app
    ports:
      - "5566:5566"
    depends_on:
      - db
      - api
      - redis

  vectordb:
    image: chromadb/chroma:0.4.25.dev85
    volumes:
      - chroma-data:/chroma/chroma
    command: "--workers 1 --host ${CHROMADB_HOST} --port ${CHROMADB_PORT} --proxy-headers --log-config chromadb/log_config.yml --timeout-keep-alive 30"
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMADB_TOKEN}
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenConfigServerAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthServerProvider
      - ANONYMIZED_TELEMETRY=${ANONYMIZED_TELEMETRY:-FALSE}
    restart: unless-stopped
    ports:
      - "8005:8005"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${CHROMADB_HOST}:${CHROMADB_PORT}/api/v1/heartbeat" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:
  redis-data:
  minio-data:
  chroma-data:

